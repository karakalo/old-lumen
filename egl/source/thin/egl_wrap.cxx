/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.36
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<typename T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; }
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#if defined(_WIN32) || defined(__CYGWIN32__)
#  define DllExport   __declspec( dllexport )
#  define SWIGSTDCALL __stdcall
#else
#  define DllExport
#  define SWIGSTDCALL
#endif


#ifdef __cplusplus
#  include <new>
#endif




/* Support for throwing Ada exceptions from C/C++ */

typedef enum
{
  SWIG_AdaException,
  SWIG_AdaOutOfMemoryException,
  SWIG_AdaIndexOutOfRangeException,
  SWIG_AdaDivideByZeroException,
  SWIG_AdaArgumentOutOfRangeException,
  SWIG_AdaNullReferenceException
} SWIG_AdaExceptionCodes;


typedef void (SWIGSTDCALL* SWIG_AdaExceptionCallback_t)(const char *);


typedef struct
{
  SWIG_AdaExceptionCodes code;
  SWIG_AdaExceptionCallback_t callback;
}
  SWIG_AdaExceptions_t;


static
SWIG_AdaExceptions_t
SWIG_ada_exceptions[] =
{
  { SWIG_AdaException, NULL },
  { SWIG_AdaOutOfMemoryException, NULL },
  { SWIG_AdaIndexOutOfRangeException, NULL },
  { SWIG_AdaDivideByZeroException, NULL },
  { SWIG_AdaArgumentOutOfRangeException, NULL },
  { SWIG_AdaNullReferenceException, NULL }
};


static
void
SWIG_AdaThrowException (SWIG_AdaExceptionCodes code, const char *msg)
{
  SWIG_AdaExceptionCallback_t callback = SWIG_ada_exceptions[SWIG_AdaException].callback;
  if (code >=0 && (size_t)code < sizeof(SWIG_ada_exceptions)/sizeof(SWIG_AdaExceptions_t)) {
    callback = SWIG_ada_exceptions[code].callback;
  }
  callback(msg);
}



#ifdef __cplusplus
extern "C"
#endif

DllExport void SWIGSTDCALL SWIGRegisterExceptionCallbacks_eGL (SWIG_AdaExceptionCallback_t systemException,
                                                                   SWIG_AdaExceptionCallback_t outOfMemory,
                                                                   SWIG_AdaExceptionCallback_t indexOutOfRange,
                                                                   SWIG_AdaExceptionCallback_t divideByZero,
                                                                   SWIG_AdaExceptionCallback_t argumentOutOfRange,
                                                                   SWIG_AdaExceptionCallback_t nullReference)
{
  SWIG_ada_exceptions [SWIG_AdaException].callback                   = systemException;
  SWIG_ada_exceptions [SWIG_AdaOutOfMemoryException].callback        = outOfMemory;
  SWIG_ada_exceptions [SWIG_AdaIndexOutOfRangeException].callback    = indexOutOfRange;
  SWIG_ada_exceptions [SWIG_AdaDivideByZeroException].callback       = divideByZero;
  SWIG_ada_exceptions [SWIG_AdaArgumentOutOfRangeException].callback = argumentOutOfRange;
  SWIG_ada_exceptions [SWIG_AdaNullReferenceException].callback      = nullReference;
}


/* Callback for returning strings to Ada without leaking memory */

typedef char * (SWIGSTDCALL* SWIG_AdaStringHelperCallback)(const char *);
static SWIG_AdaStringHelperCallback SWIG_ada_string_callback = NULL;



/* probably obsolete ...
#ifdef __cplusplus
extern "C"
#endif
DllExport void SWIGSTDCALL SWIGRegisterStringCallback_eGL(SWIG_AdaStringHelperCallback callback) {
  SWIG_ada_string_callback = callback;
}
*/



/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_AdaThrowException(SWIG_AdaArgumentOutOfRangeException, msg); return nullreturn; } else


#define protected public
#define private   public

#include "embedGL.h"



  /* Out-of-band handle values */


  Display*
  egl_DEFAULT_DISPLAY ()
  {
    return NULL;
  }


  EGLContext
  egl_NO_CONTEXT ()
  {
    return 0;
  }


  EGLDisplay
  egl_NO_DISPLAY ()
  {
    return 0;
  }


  EGLSurface
  egl_NO_SURFACE ()
  {
    return 0;
  }



/* Out-of-band attribute value */

  EGLint
  egl_DONT_CARE ()
  {
    return -1;
  }




#undef protected
#undef private
#ifdef __cplusplus
extern "C" {
#endif
DllExport int32_t SWIGSTDCALL Ada_eglGetError (
  )
{
  int32_t jresult ;
  EGLint result;

  result = eglGetError();
  jresult = result;



  return jresult;

}



DllExport void* SWIGSTDCALL Ada_eglGetDisplay (
  void * jarg1
  )
{
  void* jresult ;
  NativeDisplayType arg1 = (NativeDisplayType) 0 ;
  EGLDisplay result;

  arg1 = (NativeDisplayType)jarg1;

  result = (EGLDisplay)eglGetDisplay(arg1);
  jresult = (void *) result;



  return jresult;

}



DllExport unsigned int SWIGSTDCALL Ada_eglInitialize (
  void* jarg1
  ,

  int32_t* jarg2
  ,

  int32_t* jarg3
  )
{
  unsigned int jresult ;
  EGLDisplay arg1 = (EGLDisplay) 0 ;
  EGLint *arg2 = (EGLint *) 0 ;
  EGLint *arg3 = (EGLint *) 0 ;
  EGLBoolean result;

  arg1 = (EGLDisplay)jarg1;


  arg2 = (EGLint *) jarg2;



  arg3 = (EGLint *) jarg3;


  result = (EGLBoolean)eglInitialize(arg1,arg2,arg3);
  jresult = result;



  return jresult;

}



DllExport unsigned int SWIGSTDCALL Ada_eglTerminate (
  void* jarg1
  )
{
  unsigned int jresult ;
  EGLDisplay arg1 = (EGLDisplay) 0 ;
  EGLBoolean result;

  arg1 = (EGLDisplay)jarg1;

  result = (EGLBoolean)eglTerminate(arg1);
  jresult = result;



  return jresult;

}



DllExport char * SWIGSTDCALL Ada_eglQueryString (
  void* jarg1
  ,

  int32_t jarg2
  )
{
  char * jresult ;
  EGLDisplay arg1 = (EGLDisplay) 0 ;
  EGLint arg2 ;
  char *result = 0 ;

  arg1 = (EGLDisplay)jarg1;


  arg2 = (EGLint) jarg2;


  result = (char *)eglQueryString(arg1,arg2);
  jresult = result;



  return jresult;

}



DllExport unsigned int SWIGSTDCALL Ada_eglGetConfigs (
  void* jarg1
  ,

  void * jarg2
  ,

  int32_t jarg3
  ,

  int32_t* jarg4
  )
{
  unsigned int jresult ;
  EGLDisplay arg1 = (EGLDisplay) 0 ;
  EGLConfig *arg2 = (EGLConfig *) 0 ;
  EGLint arg3 ;
  EGLint *arg4 = (EGLint *) 0 ;
  EGLBoolean result;

  arg1 = (EGLDisplay)jarg1;

  arg2 = (EGLConfig *)jarg2;


  arg3 = (EGLint) jarg3;



  arg4 = (EGLint *) jarg4;


  result = (EGLBoolean)eglGetConfigs(arg1,arg2,arg3,arg4);
  jresult = result;



  return jresult;

}



DllExport unsigned int SWIGSTDCALL Ada_eglChooseConfig (
  void* jarg1
  ,

  int32_t* jarg2
  ,

  void * jarg3
  ,

  int32_t jarg4
  ,

  int32_t* jarg5
  )
{
  unsigned int jresult ;
  EGLDisplay arg1 = (EGLDisplay) 0 ;
  EGLint *arg2 = (EGLint *) 0 ;
  EGLConfig *arg3 = (EGLConfig *) 0 ;
  EGLint arg4 ;
  EGLint *arg5 = (EGLint *) 0 ;
  EGLBoolean result;

  arg1 = (EGLDisplay)jarg1;


  arg2 = (EGLint *) jarg2;


  arg3 = (EGLConfig *)jarg3;


  arg4 = (EGLint) jarg4;



  arg5 = (EGLint *) jarg5;


  result = (EGLBoolean)eglChooseConfig(arg1,(int32_t const *)arg2,arg3,arg4,arg5);
  jresult = result;



  return jresult;

}



DllExport unsigned int SWIGSTDCALL Ada_eglGetConfigAttrib (
  void* jarg1
  ,

  void* jarg2
  ,

  int32_t jarg3
  ,

  int32_t* jarg4
  )
{
  unsigned int jresult ;
  EGLDisplay arg1 = (EGLDisplay) 0 ;
  EGLConfig arg2 = (EGLConfig) 0 ;
  EGLint arg3 ;
  EGLint *arg4 = (EGLint *) 0 ;
  EGLBoolean result;

  arg1 = (EGLDisplay)jarg1;

  arg2 = (EGLConfig)jarg2;


  arg3 = (EGLint) jarg3;



  arg4 = (EGLint *) jarg4;


  result = (EGLBoolean)eglGetConfigAttrib(arg1,arg2,arg3,arg4);
  jresult = result;



  return jresult;

}



DllExport void* SWIGSTDCALL Ada_eglCreateWindowSurface (
  void* jarg1
  ,

  void* jarg2
  ,

  unsigned long jarg3
  ,

  int32_t* jarg4
  )
{
  void* jresult ;
  EGLDisplay arg1 = (EGLDisplay) 0 ;
  EGLConfig arg2 = (EGLConfig) 0 ;
  NativeWindowType arg3 ;
  EGLint *arg4 = (EGLint *) 0 ;
  EGLSurface result;

  arg1 = (EGLDisplay)jarg1;

  arg2 = (EGLConfig)jarg2;


  arg3 = (NativeWindowType) jarg3;



  arg4 = (EGLint *) jarg4;


  result = (EGLSurface)eglCreateWindowSurface(arg1,arg2,arg3,(int32_t const *)arg4);
  jresult = (void *) result;



  return jresult;

}



DllExport void* SWIGSTDCALL Ada_eglCreatePbufferSurface (
  void* jarg1
  ,

  void* jarg2
  ,

  int32_t* jarg3
  )
{
  void* jresult ;
  EGLDisplay arg1 = (EGLDisplay) 0 ;
  EGLConfig arg2 = (EGLConfig) 0 ;
  EGLint *arg3 = (EGLint *) 0 ;
  EGLSurface result;

  arg1 = (EGLDisplay)jarg1;

  arg2 = (EGLConfig)jarg2;


  arg3 = (EGLint *) jarg3;


  result = (EGLSurface)eglCreatePbufferSurface(arg1,arg2,(int32_t const *)arg3);
  jresult = (void *) result;



  return jresult;

}



DllExport void* SWIGSTDCALL Ada_eglCreatePixmapSurface (
  void* jarg1
  ,

  void* jarg2
  ,

  unsigned long jarg3
  ,

  int32_t* jarg4
  )
{
  void* jresult ;
  EGLDisplay arg1 = (EGLDisplay) 0 ;
  EGLConfig arg2 = (EGLConfig) 0 ;
  NativePixmapType arg3 ;
  EGLint *arg4 = (EGLint *) 0 ;
  EGLSurface result;

  arg1 = (EGLDisplay)jarg1;

  arg2 = (EGLConfig)jarg2;


  arg3 = (NativePixmapType) jarg3;



  arg4 = (EGLint *) jarg4;


  result = (EGLSurface)eglCreatePixmapSurface(arg1,arg2,arg3,(int32_t const *)arg4);
  jresult = (void *) result;



  return jresult;

}



DllExport unsigned int SWIGSTDCALL Ada_eglDestroySurface (
  void* jarg1
  ,

  void* jarg2
  )
{
  unsigned int jresult ;
  EGLDisplay arg1 = (EGLDisplay) 0 ;
  EGLSurface arg2 = (EGLSurface) 0 ;
  EGLBoolean result;

  arg1 = (EGLDisplay)jarg1;

  arg2 = (EGLSurface)jarg2;

  result = (EGLBoolean)eglDestroySurface(arg1,arg2);
  jresult = result;



  return jresult;

}



DllExport unsigned int SWIGSTDCALL Ada_eglQuerySurface (
  void* jarg1
  ,

  void* jarg2
  ,

  int32_t jarg3
  ,

  int32_t* jarg4
  )
{
  unsigned int jresult ;
  EGLDisplay arg1 = (EGLDisplay) 0 ;
  EGLSurface arg2 = (EGLSurface) 0 ;
  EGLint arg3 ;
  EGLint *arg4 = (EGLint *) 0 ;
  EGLBoolean result;

  arg1 = (EGLDisplay)jarg1;

  arg2 = (EGLSurface)jarg2;


  arg3 = (EGLint) jarg3;



  arg4 = (EGLint *) jarg4;


  result = (EGLBoolean)eglQuerySurface(arg1,arg2,arg3,arg4);
  jresult = result;



  return jresult;

}



DllExport unsigned int SWIGSTDCALL Ada_eglBindAPI (
  unsigned int jarg1
  )
{
  unsigned int jresult ;
  EGLenum arg1 ;
  EGLBoolean result;


  arg1 = (EGLenum) jarg1;


  result = (EGLBoolean)eglBindAPI(arg1);
  jresult = result;



  return jresult;

}



DllExport unsigned int SWIGSTDCALL Ada_eglQueryAPI (
  )
{
  unsigned int jresult ;
  EGLenum result;

  result = (EGLenum)eglQueryAPI();
  jresult = result;



  return jresult;

}



DllExport unsigned int SWIGSTDCALL Ada_eglWaitClient (
  )
{
  unsigned int jresult ;
  EGLBoolean result;

  result = (EGLBoolean)eglWaitClient();
  jresult = result;



  return jresult;

}



DllExport unsigned int SWIGSTDCALL Ada_eglReleaseThread (
  )
{
  unsigned int jresult ;
  EGLBoolean result;

  result = (EGLBoolean)eglReleaseThread();
  jresult = result;



  return jresult;

}



DllExport void* SWIGSTDCALL Ada_eglCreatePbufferFromClientBuffer (
  void* jarg1
  ,

  unsigned int jarg2
  ,

  void* jarg3
  ,

  void* jarg4
  ,

  int32_t* jarg5
  )
{
  void* jresult ;
  EGLDisplay arg1 = (EGLDisplay) 0 ;
  EGLenum arg2 ;
  EGLClientBuffer arg3 = (EGLClientBuffer) 0 ;
  EGLConfig arg4 = (EGLConfig) 0 ;
  EGLint *arg5 = (EGLint *) 0 ;
  EGLSurface result;

  arg1 = (EGLDisplay)jarg1;


  arg2 = (EGLenum) jarg2;


  arg3 = (EGLClientBuffer)jarg3;

  arg4 = (EGLConfig)jarg4;


  arg5 = (EGLint *) jarg5;


  result = (EGLSurface)eglCreatePbufferFromClientBuffer(arg1,arg2,arg3,arg4,(int32_t const *)arg5);
  jresult = (void *) result;



  return jresult;

}



DllExport unsigned int SWIGSTDCALL Ada_eglSurfaceAttrib (
  void* jarg1
  ,

  void* jarg2
  ,

  int32_t jarg3
  ,

  int32_t jarg4
  )
{
  unsigned int jresult ;
  EGLDisplay arg1 = (EGLDisplay) 0 ;
  EGLSurface arg2 = (EGLSurface) 0 ;
  EGLint arg3 ;
  EGLint arg4 ;
  EGLBoolean result;

  arg1 = (EGLDisplay)jarg1;

  arg2 = (EGLSurface)jarg2;


  arg3 = (EGLint) jarg3;



  arg4 = (EGLint) jarg4;


  result = (EGLBoolean)eglSurfaceAttrib(arg1,arg2,arg3,arg4);
  jresult = result;



  return jresult;

}



DllExport unsigned int SWIGSTDCALL Ada_eglBindTexImage (
  void* jarg1
  ,

  void* jarg2
  ,

  int32_t jarg3
  )
{
  unsigned int jresult ;
  EGLDisplay arg1 = (EGLDisplay) 0 ;
  EGLSurface arg2 = (EGLSurface) 0 ;
  EGLint arg3 ;
  EGLBoolean result;

  arg1 = (EGLDisplay)jarg1;

  arg2 = (EGLSurface)jarg2;


  arg3 = (EGLint) jarg3;


  result = (EGLBoolean)eglBindTexImage(arg1,arg2,arg3);
  jresult = result;



  return jresult;

}



DllExport unsigned int SWIGSTDCALL Ada_eglReleaseTexImage (
  void* jarg1
  ,

  void* jarg2
  ,

  int32_t jarg3
  )
{
  unsigned int jresult ;
  EGLDisplay arg1 = (EGLDisplay) 0 ;
  EGLSurface arg2 = (EGLSurface) 0 ;
  EGLint arg3 ;
  EGLBoolean result;

  arg1 = (EGLDisplay)jarg1;

  arg2 = (EGLSurface)jarg2;


  arg3 = (EGLint) jarg3;


  result = (EGLBoolean)eglReleaseTexImage(arg1,arg2,arg3);
  jresult = result;



  return jresult;

}



DllExport unsigned int SWIGSTDCALL Ada_eglSwapInterval (
  void* jarg1
  ,

  int32_t jarg2
  )
{
  unsigned int jresult ;
  EGLDisplay arg1 = (EGLDisplay) 0 ;
  EGLint arg2 ;
  EGLBoolean result;

  arg1 = (EGLDisplay)jarg1;


  arg2 = (EGLint) jarg2;


  result = (EGLBoolean)eglSwapInterval(arg1,arg2);
  jresult = result;



  return jresult;

}



DllExport void* SWIGSTDCALL Ada_eglCreateContext (
  void* jarg1
  ,

  void* jarg2
  ,

  void* jarg3
  ,

  int32_t* jarg4
  )
{
  void* jresult ;
  EGLDisplay arg1 = (EGLDisplay) 0 ;
  EGLConfig arg2 = (EGLConfig) 0 ;
  EGLContext arg3 = (EGLContext) 0 ;
  EGLint *arg4 = (EGLint *) 0 ;
  EGLContext result;

  arg1 = (EGLDisplay)jarg1;

  arg2 = (EGLConfig)jarg2;

  arg3 = (EGLContext)jarg3;


  arg4 = (EGLint *) jarg4;


  result = (EGLContext)eglCreateContext(arg1,arg2,arg3,(int32_t const *)arg4);
  jresult = (void *) result;



  return jresult;

}



DllExport unsigned int SWIGSTDCALL Ada_eglDestroyContext (
  void* jarg1
  ,

  void* jarg2
  )
{
  unsigned int jresult ;
  EGLDisplay arg1 = (EGLDisplay) 0 ;
  EGLContext arg2 = (EGLContext) 0 ;
  EGLBoolean result;

  arg1 = (EGLDisplay)jarg1;

  arg2 = (EGLContext)jarg2;

  result = (EGLBoolean)eglDestroyContext(arg1,arg2);
  jresult = result;



  return jresult;

}



DllExport unsigned int SWIGSTDCALL Ada_eglMakeCurrent (
  void* jarg1
  ,

  void* jarg2
  ,

  void* jarg3
  ,

  void* jarg4
  )
{
  unsigned int jresult ;
  EGLDisplay arg1 = (EGLDisplay) 0 ;
  EGLSurface arg2 = (EGLSurface) 0 ;
  EGLSurface arg3 = (EGLSurface) 0 ;
  EGLContext arg4 = (EGLContext) 0 ;
  EGLBoolean result;

  arg1 = (EGLDisplay)jarg1;

  arg2 = (EGLSurface)jarg2;

  arg3 = (EGLSurface)jarg3;

  arg4 = (EGLContext)jarg4;

  result = (EGLBoolean)eglMakeCurrent(arg1,arg2,arg3,arg4);
  jresult = result;



  return jresult;

}



DllExport void* SWIGSTDCALL Ada_eglGetCurrentContext (
  )
{
  void* jresult ;
  EGLContext result;

  result = (EGLContext)eglGetCurrentContext();
  jresult = (void *) result;



  return jresult;

}



DllExport void* SWIGSTDCALL Ada_eglGetCurrentSurface (
  int32_t jarg1
  )
{
  void* jresult ;
  EGLint arg1 ;
  EGLSurface result;


  arg1 = (EGLint) jarg1;


  result = (EGLSurface)eglGetCurrentSurface(arg1);
  jresult = (void *) result;



  return jresult;

}



DllExport void* SWIGSTDCALL Ada_eglGetCurrentDisplay (
  )
{
  void* jresult ;
  EGLDisplay result;

  result = (EGLDisplay)eglGetCurrentDisplay();
  jresult = (void *) result;



  return jresult;

}



DllExport unsigned int SWIGSTDCALL Ada_eglQueryContext (
  void* jarg1
  ,

  void* jarg2
  ,

  int32_t jarg3
  ,

  int32_t* jarg4
  )
{
  unsigned int jresult ;
  EGLDisplay arg1 = (EGLDisplay) 0 ;
  EGLContext arg2 = (EGLContext) 0 ;
  EGLint arg3 ;
  EGLint *arg4 = (EGLint *) 0 ;
  EGLBoolean result;

  arg1 = (EGLDisplay)jarg1;

  arg2 = (EGLContext)jarg2;


  arg3 = (EGLint) jarg3;



  arg4 = (EGLint *) jarg4;


  result = (EGLBoolean)eglQueryContext(arg1,arg2,arg3,arg4);
  jresult = result;



  return jresult;

}



DllExport unsigned int SWIGSTDCALL Ada_eglWaitGL (
  )
{
  unsigned int jresult ;
  EGLBoolean result;

  result = (EGLBoolean)eglWaitGL();
  jresult = result;



  return jresult;

}



DllExport unsigned int SWIGSTDCALL Ada_eglWaitNative (
  int32_t jarg1
  )
{
  unsigned int jresult ;
  EGLint arg1 ;
  EGLBoolean result;


  arg1 = (EGLint) jarg1;


  result = (EGLBoolean)eglWaitNative(arg1);
  jresult = result;



  return jresult;

}



DllExport unsigned int SWIGSTDCALL Ada_eglSwapBuffers (
  void* jarg1
  ,

  void* jarg2
  )
{
  unsigned int jresult ;
  EGLDisplay arg1 = (EGLDisplay) 0 ;
  EGLSurface arg2 = (EGLSurface) 0 ;
  EGLBoolean result;

  arg1 = (EGLDisplay)jarg1;

  arg2 = (EGLSurface)jarg2;

  result = (EGLBoolean)eglSwapBuffers(arg1,arg2);
  jresult = result;



  return jresult;

}



DllExport unsigned int SWIGSTDCALL Ada_eglCopyBuffers (
  void* jarg1
  ,

  void* jarg2
  ,

  unsigned long jarg3
  )
{
  unsigned int jresult ;
  EGLDisplay arg1 = (EGLDisplay) 0 ;
  EGLSurface arg2 = (EGLSurface) 0 ;
  NativePixmapType arg3 ;
  EGLBoolean result;

  arg1 = (EGLDisplay)jarg1;

  arg2 = (EGLSurface)jarg2;


  arg3 = (NativePixmapType) jarg3;


  result = (EGLBoolean)eglCopyBuffers(arg1,arg2,arg3);
  jresult = result;



  return jresult;

}



DllExport void* SWIGSTDCALL Ada_eglGetProcAddress (
  char * jarg1
  )
{
  void* jresult ;
  char *arg1 = (char *) 0 ;
  void *result = 0 ;

  arg1 = jarg1;

  result = (void *)eglGetProcAddress((char const *)arg1);
  jresult = (void *) result;



  return jresult;

}



DllExport void * SWIGSTDCALL Ada_egl_DEFAULT_DISPLAY (
  )
{
  void * jresult ;
  Display *result = 0 ;

  result = (Display *)egl_DEFAULT_DISPLAY();
  jresult = (void *) result;



  return jresult;

}



DllExport void* SWIGSTDCALL Ada_egl_NO_CONTEXT (
  )
{
  void* jresult ;
  EGLContext result;

  result = (EGLContext)egl_NO_CONTEXT();
  jresult = (void *) result;



  return jresult;

}



DllExport void* SWIGSTDCALL Ada_egl_NO_DISPLAY (
  )
{
  void* jresult ;
  EGLDisplay result;

  result = (EGLDisplay)egl_NO_DISPLAY();
  jresult = (void *) result;



  return jresult;

}



DllExport void* SWIGSTDCALL Ada_egl_NO_SURFACE (
  )
{
  void* jresult ;
  EGLSurface result;

  result = (EGLSurface)egl_NO_SURFACE();
  jresult = (void *) result;



  return jresult;

}



DllExport int32_t SWIGSTDCALL Ada_egl_DONT_CARE (
  )
{
  int32_t jresult ;
  EGLint result;

  result = egl_DONT_CARE();
  jresult = result;



  return jresult;

}



#ifdef __cplusplus
}
#endif
#ifdef __cplusplus
extern "C" {
#endif
#ifdef __cplusplus
}
#endif

